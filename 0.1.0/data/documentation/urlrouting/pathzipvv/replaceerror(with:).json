{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathZipVV\/replaceError(with:)"},"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"output","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"A parser that never fails.","type":"text"}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"name":"output","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An output to return should the upstream parser fail."}]}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"Useful for providing a default output for a parser.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, we could create a parser that parses a plus or minus sign and maps the result to","type":"text"},{"text":" ","type":"text"},{"text":"a positive or negative multiplier respectively, or else defaults to a positive multiplier:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let sign = OneOf {","  \"+\".map { 1 }","  \"-\".map { -1 }","}",".replaceError(with: 1)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Notably this parser is non-throwing:"}],"type":"paragraph"},{"syntax":"swift","code":["var input = \"-123\"[...]","","\/\/ No `try` required:","sign.parse(&input)  \/\/ -1","input               \/\/ \"123\"","","\/\/ Simply returns the default when parsing fails:","sign.parse(&input)  \/\/ 1"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This means it can be used to turn throwing parsers into non-throwing ones, which is important"},{"type":"text","text":" "},{"type":"text","text":"for building up complex parsers that cannot fail."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathZipVV","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathZipVV\/Parser-Implementations"]]},"kind":"symbol","sections":[],"metadata":{"title":"replaceError(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"modules":[{"name":"URLRouting"}],"symbolKind":"method","externalID":"s:7Parsing6ParserPAAE12replaceError4withAA7ParsersO07ReplaceD0Vy_xG6OutputQz_tF::SYNTHESIZED::s:10URLRouting9PathZipVVV","extendedModule":"Parsing","role":"symbol","roleHeading":"Instance Method"},"variants":[{"paths":["\/documentation\/urlrouting\/pathzipvv\/replaceerror(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://co.pointfree.URLRouting/documentation/URLRouting":{"title":"URLRouting","type":"topic","abstract":[{"type":"text","text":"A bidirectional router with more type safety and less fuss. This library is built with "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing"},{"type":"text","text":"."}],"role":"collection","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting","url":"\/documentation\/urlrouting","kind":"symbol"},"http://github.com/pointfreeco/swift-parsing":{"url":"http:\/\/github.com\/pointfreeco\/swift-parsing","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing","title":"Parsing","titleInlineContent":[{"text":"Parsing","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/URLRouting/PathZipVV":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathZipVV","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathZipVV","title":"PathZipVV","type":"topic","role":"symbol","navigatorTitle":[{"text":"PathZipVV","kind":"identifier"}],"url":"\/documentation\/urlrouting\/pathzipvv","kind":"symbol","abstract":[]},"doc://co.pointfree.URLRouting/documentation/URLRouting/PathZipVV/replaceError(with:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathZipVV\/replaceError(with:)","url":"\/documentation\/urlrouting\/pathzipvv\/replaceerror(with:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"title":"replaceError(with:)"},"doc://co.pointfree.URLRouting/documentation/URLRouting/PathZipVV/Parser-Implementations":{"title":"Parser Implementations","kind":"article","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathZipVV\/Parser-Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/urlrouting\/pathzipvv\/parser-implementations","type":"topic"}}}